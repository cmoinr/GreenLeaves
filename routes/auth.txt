const express = require('express');
const router = express.Router();
const passport = require('./routes/passport');
const bcrypt = require('bcrypt');
const User = require('./models/User');

router.get('/login', (req, res) => {
  res.render('login'); // Renderiza tu página de login
});

router.post('/login',
  passport.authenticate('local', { failureRedirect: '/login' }), // Redirige al login en caso de fallo
  (req, res) => {
    res.redirect('/contactos'); // Redirige a la página de contactos después de la autenticación exitosa
  });

router.get('/logout', (req, res) => {
  req.logout(); // Cierra la sesión del usuario
  res.redirect('/login'); // Redirige al login
});

// Ruta de registro (solo para administradores)
router.get('/register', requireAdmin, (req, res) => { // Implementa el middleware requireAdmin
  res.render('register'); // Renderiza tu página de registro
});

router.post('/register', requireAdmin, (req, res) => {
  const { username, password } = req.body;
  bcrypt.hash(password, 10, (err, hash) => {
    if (err) {
      return res.status(500).send('Error al registrar el usuario');
    }
    User.create(username, hash, (err, id) => {
      if (err) {
        return res.status(500).send('Error al registrar el usuario');
      }
      res.redirect('/login');
    });
  });
});

router.get('/auth/google', passport.authenticate('google', { scope: ['profile', 'email'] }));

router.get('/auth/google/callback',
  passport.authenticate('google', { failureRedirect: '/login' }), // Redirige al login en caso de fallo
  (req, res) => {
    res.redirect('/contactos'); // Redirige a la página de contactos después de la autenticación exitosa
  });

module.exports = router;